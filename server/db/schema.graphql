type Bike implements Node {
  id: ID!
  name: String!
  width: Int!
  height: Int!
  size: Int!
  bikeshed: Bikeshed
  totalRating: Int
}

type BikeConnection {
  pageInfo: PageInfo!
  edges: [BikeEdge]
}

type BikeEdge {
  node: Bike
  cursor: String!
}

type Bikeshed implements Node {
  id: ID!
  description: String!
  creator: User
  bikes(before: String, after: String, first: Int, last: Int): BikeConnection
  voteCount: Int
}

type BikeshedConnection {
  pageInfo: PageInfo!
  edges: [BikeshedEdge]
}

type BikeshedEdge {
  node: Bikeshed
  cursor: String!
}

input CreateBikeshedInput {
  description: String!
  clientMutationId: String!
}

type CreateBikeshedPayload {
  bikeshedEdge: BikeshedEdge
  clientMutationId: String!
}

type Mutation {
  createBikeshed(input: CreateBikeshedInput!): CreateBikeshedPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  viewer: Viewer
  node(id: ID!): Node
}

type User implements Node {
  id: ID!
  name: String
}

type Viewer {
  isRegistered: Boolean!
  bikesheds(before: String, after: String, first: Int, last: Int): BikeshedConnection
}
